# CSS FLEXBOX

# Aula 01: Introdução ao Flexbox

## Objetivos da aula 
- Apresentar os fundamentos e aplicações da propriedade flexbox na criação de layouts responsivos, sem a necessidade a definição de valores fixos. 

1. Conhecer a estrutura básica 
2. Entender a diferença entre Flex Container e Flex Item
3. Conhecer inicialmente alguma propriedades

## Suporte 
Foi projetado como um modelo de layout unidimensional e como um método que pode oferecer distribuição de espaço entre itens em uma interface e recursos de alinhamento.

## Flex Container 
É a tag que envolve os itens (tag que possui items filhos), será nela que iremos aplicar a propriedade “display: flex”. Transforma todos os seus itens filhos em flex itens. 

Propriedades relacionadas:
- Display (inicializador do container)
- Flex-direction (vai fazer o direcionamento destes itens, seja em linha ou seja em coluna)
- Flex-wrap (que se aplica para quebra de linha ou não)
- Flex-flow (abreviação para o direction e wrap)
- Justify-content (vai alinhar os itens do container de acordo com sua direção)
- Align-items (alinhar o itens de acordo com o eixo do container)
- Align-content (alinhar as linhas do container)

### Flex Item (itens que são filhos diretos de um container)
São os elementos filhos diretos do Flex Container. E também podem se tornar Flex Container.

Propriedades relacionadas:
- Flex-grow (que vai definir o fator de crescimento)
- Flex-basis (vai defenir o tamanho inicial deste elemento, antes da distribuição do espaço restante dentro do container)
- Flex-shrink (define a capacidade de redução)
- Flex
- Order (relacionado a ordem de distribuição e listagem destes itens)
- Align-self (defenir o alinhamento de um item específico do nosso container)




# Aula 02: Fundamentos parte 1 - flex container


## Display: flex

### Objetivo da aula
1. Conhecer e aplicar a propriedade de inicialização do flex container.

**Display: flex**
Torna a tag um elemento do tipo flex container, e assim automaticamente todos os seus filhos diretos desta tag, tornam-se em flex items.


## Flex-direction

1. Entender o comportamento padrão de orientação horizontal de um flex container 
2. Aprender a modificar a orientação horizontal 

É a propriedade que estabelece o eixo principal do container, definindo assim a direção que os flex items são colocados no flex container.

- Os eixos: 
	- row( padrão ): à direção do texto, esquerda para direita
	- row-reverse: sentido oposto à direção do texto
	- column: ordenação de cima para baixo, em coluna unica
	- column-reverse: ordenação inversa, de baixo para cima


## Flex-wrap

É a propriedade que define se os itens devem ou não quebrar a linha. Por padrão eles não quebram linhas, isso faz com que os flex itens sejam compactados além do limite do conteúdo. 

- nowrap:
	- nowrap: é o padrão, não permite a quebra de linha. 
	- wrap: permite a quebra de linha assim que um dos flex itens não puder mais ser compactado.
	- wrap-reverse: wrap: permite a quebra de linha assim que um dos flex itens não puder mais ser compactado, porém na direção contrária da linha, acima.


## Flex-flow	

É um atalho para as propriedades **flex-direction** e **flex-wrap**. Porém seu uso não é tão comum, visto que, quando mudamos o flex-direction para column, mantemos o padrão do flex-wrap que é nowrap.


## Justify-content

Essa propriedade vai se encarregar de alinhar os itens dentro do container de acordo com a direção pretendida e tratar da distribuição de espaçamento entre eles. 

***OBS: caso seus itens esteja ocupando 100% de todo o container, ela não se aplica***

As variações 
- flex-start: início do container. 
- flex-end: final do container. 
- center: ao centro do container. 
- space-between: cria um espaçamento igual entre os elementos. 
- space-around: os espaçamentos do meio são duas vezes maiores que o inicial e final.


## Align-items

Trata do alinhamento dos flex itens de acordo com o eixo do container. O alinhamento é diferente para quando os itens estão em colunas ou linhas. Permite o alinhamento central no eixo vertical.

**Tipos de alinhamento:** 
- center: alinhamento dos itens ao centro 
- stretch: padrão, e os flex itens cresçam igualmente 
- flex-start: alinhamento dos itens no início 
- flex-end: alinhamento dos itens no final 
- baseline: alinhamento de acordo com a linha base da tipografia dos itens


## Align-content

É a propriedade responsável por tratar o alinhamento das linhas do container em relação ao eixo vertical do container. 

Precisamos que: 
- O container utilize quebra de linhas 
- A altura do container seja maior que a soma das linhas dos itens 

Tipos de alinhamento 
- center: alinhamento dos itens ao centro 
- stretch: é o padrão e os flex itens crescem igualmente (pega o maior elemento e utiliza-o como referência)
- flex-start: alinhamento dos itens no início 
- flex-end: alinhamento dos itens no final 
- space-between: cria um espaçamento igual entre os elementos 
- space-around: os espaçamentos do meio são duas vezes maiores que o inicial e final




# Aula 02: Fundamentos parte 2 - flex items


## Flex-grow

Define a proporcionalidade de crescimentos dos itens, respeitando o tamanho de seus conteúdos internos. 
- OBS: não irá funcionar caso tenhamos adicionado justify-content ao nosso flex container


## Flex-basis

É a propriedade que estabelece o tamanho inicial do item antes das distribuição de espaço restante dentro dele, usando como base o conteúdo interno disposto.

Valores possíveis:
- auto: caso o item não tenha tamanho, este será proporcional ao conteúdo do item.
- px, %, em, ...: são valores exatos previamente definidos
- 0 (zero): terá relação com a definição do flex-grow


## Flex-shrink

É a propriedade que estabelece a capacidade de redução ou compressão do tamanho de um item.


## Flex 

Esta propriedade é um atalho ou abreviação de escrita para as propriedades: grow, shrink e basis.


## Align-self 

É a propriedade que estabelece o alinhamento de modo individual sobre um determinado item.

Valores possíveis: 
- auto: valor padrão, irá respeitar a definição de align-items do container 
- flex-start: ao início do container 
- flex-end: ao final do container 
- center: relativo ao centro de acordo com o eixo 
- stretch: ocupa todo os espaço relativo 
- baseline: utiliza a linha base da tipografia

